{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Updated Final Tru U-net Autoencoderipynb","provenance":[{"file_id":"1_mbO4S7gYvxapg0kqnqT0P1fpQB4tD5M","timestamp":1602525953501}],"authorship_tag":"ABX9TyMWYhx//6eefbEFpGUmgzUq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"-wlvam2Ezdzx","executionInfo":{"status":"ok","timestamp":1602525701313,"user_tz":-330,"elapsed":23306,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}},"outputId":"874d79be-27b2-422b-ad48-efca43791515","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sTnok07TZF21","executionInfo":{"status":"ok","timestamp":1602525732143,"user_tz":-330,"elapsed":34733,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":["#Sahil GDrive\n","import numpy as np\n","\n","train_1 = np.load(r'/content/drive/My Drive/Baby Cry/stratified k fold data/train_5.npy')\n","test_1 = np.load(r'/content/drive/My Drive/Baby Cry/stratified k fold data/test_5.npy')\n","\n","train_lab_1 = np.load(r'/content/drive/My Drive/Baby Cry/stratified k fold data/train_lab_5.npy')\n","test_lab_1 = np.load(r'/content/drive/My Drive/Baby Cry/stratified k fold data/test_lab_5.npy')"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"g2CbqaYb4z0X","executionInfo":{"status":"ok","timestamp":1602523980578,"user_tz":-330,"elapsed":4047,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":[""],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"aG6Sz2sHk99z","executionInfo":{"status":"ok","timestamp":1602525743011,"user_tz":-330,"elapsed":9658,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}},"outputId":"88cb15b0-060c-4f53-e936-f4de078444f8","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D,Flatten,Reshape,Cropping2D,Conv2DTranspose,concatenate,BatchNormalization,Dropout\n","from tensorflow.keras.models import Model\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.initializers import orthogonal\n","from tensorflow.keras.optimizers import Adam, SGD,RMSprop\n","\n","input_file = Input(shape=(288,432, 3))\n","\n","def Contract(x, filters, kernel , strides, padding, block_id, kernel_init=orthogonal()):\n","  prefix = f'block_{block_id}_'\n","  x = tf.keras.layers.Conv2D(filters= filters,kernel_size = kernel, strides = strides, kernel_initializer=kernel_init,\n","                             activation = None , padding = padding, name= prefix+'conv1_contract')(x)   \n","  x = BatchNormalization()(x)                                                   \n","  x = tf.keras.layers.Conv2D(filters= filters,kernel_size = kernel, strides = strides, kernel_initializer=kernel_init,\n","                             activation = None, padding = padding,  name= prefix+'conv2_contract')(x)\n","  x = tf.keras.layers.BatchNormalization(name=prefix+'conv_bn_contract')(x)\n","  x = tf.keras.layers.Dropout(0.2 ,name = prefix +'dropout_contract')(x)\n","  x = tf.keras.layers.LeakyReLU(name=prefix+'lrelu_contract')(x)\n","  return x\n","\n","def Expand(x , y , filters, kernel, trans_kernel,strides, padding, block_id, kernel_init=orthogonal()):\n","  prefix = f'block_{block_id}_'\n","  x = tf.keras.layers.Conv2DTranspose(filters,trans_kernel,strides = strides,kernel_initializer = kernel_init, \n","                                      padding = padding,name = prefix + 'trans_conv2d_expand')(x)\n","  x = BatchNormalization()(x)                                    \n","  x = tf.keras.layers.concatenate([x,y],name = prefix + 'concatenate_expand')\n","  x = tf.keras.layers.Conv2D(filters,kernel_size = kernel,activation = None ,kernel_initializer = kernel_init,\n","                             padding = padding,name = prefix + 'conv2d_1_expand')(x)\n","  x = BatchNormalization()(x)                           \n","  x = tf.keras.layers.Conv2D(filters,kernel_size=kernel,activation = None ,kernel_initializer = kernel_init,\n","                             padding = padding,name = prefix + 'conv2d_2_expand')(x)\n","  x = tf.keras.layers.BatchNormalization(name=prefix+'conv_bn_expand')(x)\n","  x = tf.keras.layers.LeakyReLU(name=prefix+'lrelu_expand')(x)\n","  x = tf.keras.layers.Dropout(0.2, name=prefix+'dropout_expand')((x))\n","  return x\n","\n","\n","def U_net_arch(input_shape):\n","  inputs = Input(shape=input_shape)\n","  \n","  #contracting path\n","  \n","  c1 = Contract(inputs, 32, 3 , strides = 1, padding='same', block_id=1)\n","  p1 = tf.keras.layers.MaxPooling2D((2,2),name = 'block_1_max_pool')(c1)\n","\n","  c2 = Contract(p1, 64, 3 , strides = 1, padding='same', block_id=2)\n","  p2 = tf.keras.layers.MaxPooling2D((2,2),name = 'block_2_max_pool')(c2)\n","\n","  c3 = Contract(p2, 128, 3 , strides = 1, padding='same', block_id=3)\n","  p3 = tf.keras.layers.MaxPooling2D((2,2),name = 'block_3_max_pool')(c3)\n","\n","  c4 = Contract(p3, 256, 3 , strides = 1, padding='same', block_id=4)\n","  p4 = tf.keras.layers.MaxPooling2D((2,2),name = 'block_4_max_pool')(c4)\n","\n","  c5 = Contract(p4, 512, 3 , strides = 1, padding='same', block_id=5)\n","\n","  #Dense layers to reduce the bottleneck features\n","  \n","  x = Flatten(name = 'flatten_bottleneck')(c5)\n","\n","  \n","  c5 = Reshape((18,27 , 512),name = 'reshape_flatten')(x)\n","  \n","  #expanding path\n","  \n","  c6 = Expand(c5, c4, 256, 3 , (2,2), strides = (2,2), padding='same', block_id = 6)\n","  \n","  c7 = Expand(c6, c3, 128, 3 , (2,2), strides = (2,2), padding='same', block_id = 7)\n","  \n","  c8 = Expand(c7, c2,64, 3 , (2,2), strides = (2,2), padding='same', block_id = 8)\n","\n","  c9 = Expand(c8, c1, 32, 3 , (2,2), strides = (2,2), padding='same', block_id = 9)\n","  \n","  outputs = tf.keras.layers.Conv2D(3,(1,1),activation = 'sigmoid')(c9)\n","  \n","  return Model(inputs=inputs, outputs=outputs) \n","\n","input_shape = (288,432)\n","U_net = U_net_arch((*input_shape,3))\n","\n","U_net.compile(optimizer=RMSprop(), loss='mean_squared_error') #msse\n","\n","U_net.summary()\n","\n","\n","\n","\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Model: \"functional_1\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_2 (InputLayer)            [(None, 288, 432, 3) 0                                            \n","__________________________________________________________________________________________________\n","block_1_conv1_contract (Conv2D) (None, 288, 432, 32) 896         input_2[0][0]                    \n","__________________________________________________________________________________________________\n","batch_normalization (BatchNorma (None, 288, 432, 32) 128         block_1_conv1_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_1_conv2_contract (Conv2D) (None, 288, 432, 32) 9248        batch_normalization[0][0]        \n","__________________________________________________________________________________________________\n","block_1_conv_bn_contract (Batch (None, 288, 432, 32) 128         block_1_conv2_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_1_dropout_contract (Dropo (None, 288, 432, 32) 0           block_1_conv_bn_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_1_lrelu_contract (LeakyRe (None, 288, 432, 32) 0           block_1_dropout_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_1_max_pool (MaxPooling2D) (None, 144, 216, 32) 0           block_1_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_2_conv1_contract (Conv2D) (None, 144, 216, 64) 18496       block_1_max_pool[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_1 (BatchNor (None, 144, 216, 64) 256         block_2_conv1_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_2_conv2_contract (Conv2D) (None, 144, 216, 64) 36928       batch_normalization_1[0][0]      \n","__________________________________________________________________________________________________\n","block_2_conv_bn_contract (Batch (None, 144, 216, 64) 256         block_2_conv2_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_2_dropout_contract (Dropo (None, 144, 216, 64) 0           block_2_conv_bn_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_2_lrelu_contract (LeakyRe (None, 144, 216, 64) 0           block_2_dropout_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_2_max_pool (MaxPooling2D) (None, 72, 108, 64)  0           block_2_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_3_conv1_contract (Conv2D) (None, 72, 108, 128) 73856       block_2_max_pool[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_2 (BatchNor (None, 72, 108, 128) 512         block_3_conv1_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_3_conv2_contract (Conv2D) (None, 72, 108, 128) 147584      batch_normalization_2[0][0]      \n","__________________________________________________________________________________________________\n","block_3_conv_bn_contract (Batch (None, 72, 108, 128) 512         block_3_conv2_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_3_dropout_contract (Dropo (None, 72, 108, 128) 0           block_3_conv_bn_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_3_lrelu_contract (LeakyRe (None, 72, 108, 128) 0           block_3_dropout_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_3_max_pool (MaxPooling2D) (None, 36, 54, 128)  0           block_3_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_4_conv1_contract (Conv2D) (None, 36, 54, 256)  295168      block_3_max_pool[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_3 (BatchNor (None, 36, 54, 256)  1024        block_4_conv1_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_4_conv2_contract (Conv2D) (None, 36, 54, 256)  590080      batch_normalization_3[0][0]      \n","__________________________________________________________________________________________________\n","block_4_conv_bn_contract (Batch (None, 36, 54, 256)  1024        block_4_conv2_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_4_dropout_contract (Dropo (None, 36, 54, 256)  0           block_4_conv_bn_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_4_lrelu_contract (LeakyRe (None, 36, 54, 256)  0           block_4_dropout_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_4_max_pool (MaxPooling2D) (None, 18, 27, 256)  0           block_4_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_5_conv1_contract (Conv2D) (None, 18, 27, 512)  1180160     block_4_max_pool[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_4 (BatchNor (None, 18, 27, 512)  2048        block_5_conv1_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_5_conv2_contract (Conv2D) (None, 18, 27, 512)  2359808     batch_normalization_4[0][0]      \n","__________________________________________________________________________________________________\n","block_5_conv_bn_contract (Batch (None, 18, 27, 512)  2048        block_5_conv2_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_5_dropout_contract (Dropo (None, 18, 27, 512)  0           block_5_conv_bn_contract[0][0]   \n","__________________________________________________________________________________________________\n","block_5_lrelu_contract (LeakyRe (None, 18, 27, 512)  0           block_5_dropout_contract[0][0]   \n","__________________________________________________________________________________________________\n","flatten_bottleneck (Flatten)    (None, 248832)       0           block_5_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","reshape_flatten (Reshape)       (None, 18, 27, 512)  0           flatten_bottleneck[0][0]         \n","__________________________________________________________________________________________________\n","block_6_trans_conv2d_expand (Co (None, 36, 54, 256)  524544      reshape_flatten[0][0]            \n","__________________________________________________________________________________________________\n","batch_normalization_5 (BatchNor (None, 36, 54, 256)  1024        block_6_trans_conv2d_expand[0][0]\n","__________________________________________________________________________________________________\n","block_6_concatenate_expand (Con (None, 36, 54, 512)  0           batch_normalization_5[0][0]      \n","                                                                 block_4_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_6_conv2d_1_expand (Conv2D (None, 36, 54, 256)  1179904     block_6_concatenate_expand[0][0] \n","__________________________________________________________________________________________________\n","batch_normalization_6 (BatchNor (None, 36, 54, 256)  1024        block_6_conv2d_1_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_6_conv2d_2_expand (Conv2D (None, 36, 54, 256)  590080      batch_normalization_6[0][0]      \n","__________________________________________________________________________________________________\n","block_6_conv_bn_expand (BatchNo (None, 36, 54, 256)  1024        block_6_conv2d_2_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_6_lrelu_expand (LeakyReLU (None, 36, 54, 256)  0           block_6_conv_bn_expand[0][0]     \n","__________________________________________________________________________________________________\n","block_6_dropout_expand (Dropout (None, 36, 54, 256)  0           block_6_lrelu_expand[0][0]       \n","__________________________________________________________________________________________________\n","block_7_trans_conv2d_expand (Co (None, 72, 108, 128) 131200      block_6_dropout_expand[0][0]     \n","__________________________________________________________________________________________________\n","batch_normalization_7 (BatchNor (None, 72, 108, 128) 512         block_7_trans_conv2d_expand[0][0]\n","__________________________________________________________________________________________________\n","block_7_concatenate_expand (Con (None, 72, 108, 256) 0           batch_normalization_7[0][0]      \n","                                                                 block_3_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_7_conv2d_1_expand (Conv2D (None, 72, 108, 128) 295040      block_7_concatenate_expand[0][0] \n","__________________________________________________________________________________________________\n","batch_normalization_8 (BatchNor (None, 72, 108, 128) 512         block_7_conv2d_1_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_7_conv2d_2_expand (Conv2D (None, 72, 108, 128) 147584      batch_normalization_8[0][0]      \n","__________________________________________________________________________________________________\n","block_7_conv_bn_expand (BatchNo (None, 72, 108, 128) 512         block_7_conv2d_2_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_7_lrelu_expand (LeakyReLU (None, 72, 108, 128) 0           block_7_conv_bn_expand[0][0]     \n","__________________________________________________________________________________________________\n","block_7_dropout_expand (Dropout (None, 72, 108, 128) 0           block_7_lrelu_expand[0][0]       \n","__________________________________________________________________________________________________\n","block_8_trans_conv2d_expand (Co (None, 144, 216, 64) 32832       block_7_dropout_expand[0][0]     \n","__________________________________________________________________________________________________\n","batch_normalization_9 (BatchNor (None, 144, 216, 64) 256         block_8_trans_conv2d_expand[0][0]\n","__________________________________________________________________________________________________\n","block_8_concatenate_expand (Con (None, 144, 216, 128 0           batch_normalization_9[0][0]      \n","                                                                 block_2_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_8_conv2d_1_expand (Conv2D (None, 144, 216, 64) 73792       block_8_concatenate_expand[0][0] \n","__________________________________________________________________________________________________\n","batch_normalization_10 (BatchNo (None, 144, 216, 64) 256         block_8_conv2d_1_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_8_conv2d_2_expand (Conv2D (None, 144, 216, 64) 36928       batch_normalization_10[0][0]     \n","__________________________________________________________________________________________________\n","block_8_conv_bn_expand (BatchNo (None, 144, 216, 64) 256         block_8_conv2d_2_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_8_lrelu_expand (LeakyReLU (None, 144, 216, 64) 0           block_8_conv_bn_expand[0][0]     \n","__________________________________________________________________________________________________\n","block_8_dropout_expand (Dropout (None, 144, 216, 64) 0           block_8_lrelu_expand[0][0]       \n","__________________________________________________________________________________________________\n","block_9_trans_conv2d_expand (Co (None, 288, 432, 32) 8224        block_8_dropout_expand[0][0]     \n","__________________________________________________________________________________________________\n","batch_normalization_11 (BatchNo (None, 288, 432, 32) 128         block_9_trans_conv2d_expand[0][0]\n","__________________________________________________________________________________________________\n","block_9_concatenate_expand (Con (None, 288, 432, 64) 0           batch_normalization_11[0][0]     \n","                                                                 block_1_lrelu_contract[0][0]     \n","__________________________________________________________________________________________________\n","block_9_conv2d_1_expand (Conv2D (None, 288, 432, 32) 18464       block_9_concatenate_expand[0][0] \n","__________________________________________________________________________________________________\n","batch_normalization_12 (BatchNo (None, 288, 432, 32) 128         block_9_conv2d_1_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_9_conv2d_2_expand (Conv2D (None, 288, 432, 32) 9248        batch_normalization_12[0][0]     \n","__________________________________________________________________________________________________\n","block_9_conv_bn_expand (BatchNo (None, 288, 432, 32) 128         block_9_conv2d_2_expand[0][0]    \n","__________________________________________________________________________________________________\n","block_9_lrelu_expand (LeakyReLU (None, 288, 432, 32) 0           block_9_conv_bn_expand[0][0]     \n","__________________________________________________________________________________________________\n","block_9_dropout_expand (Dropout (None, 288, 432, 32) 0           block_9_lrelu_expand[0][0]       \n","__________________________________________________________________________________________________\n","conv2d (Conv2D)                 (None, 288, 432, 3)  99          block_9_dropout_expand[0][0]     \n","==================================================================================================\n","Total params: 7,773,859\n","Trainable params: 7,767,011\n","Non-trainable params: 6,848\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yMxuqMI647IT","executionInfo":{"status":"ok","timestamp":1602525744413,"user_tz":-330,"elapsed":1360,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":["regularizer = tf.keras.regularizers.l2(.0001)\n","batch_size=20\n","for layer in U_net.layers:\n","    if layer.trainable == True:\n","        for attr in ['kernel_regularizer']:\n","            if hasattr(layer, attr):\n","                setattr(layer, attr, regularizer)\n"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"QaNq-YSw5BTe","executionInfo":{"status":"error","timestamp":1602525872004,"user_tz":-330,"elapsed":128926,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}},"outputId":"f10bbd17-523e-4cdc-9e29-a754784b833a","colab":{"base_uri":"https://localhost:8080/","height":453}},"source":["U_net.fit(train_1,train_1, batch_size=16,\tvalidation_data=(test_1,test_1),\tepochs=50, verbose=2, use_multiprocessing=True, workers=2)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","38/38 - 33s - loss: 0.0154 - val_loss: 0.0796\n","Epoch 2/50\n","38/38 - 29s - loss: 0.0039 - val_loss: 0.0223\n","Epoch 3/50\n","38/38 - 29s - loss: 0.0027 - val_loss: 0.0125\n","Epoch 4/50\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ea887b22a756>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mU_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m       \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m        \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mworkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    106\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_method_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_in_multi_worker_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 108\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m     \u001b[0;31m# Running inside `run_distribute_coordinator` already.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                 batch_size=batch_size):\n\u001b[1;32m   1097\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1099\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    778\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m         \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 780\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    805\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    806\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 807\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    808\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2828\u001b[0m       \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2829\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2831\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_filtered_call\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1846\u001b[0m                            resource_variable_ops.BaseResourceVariable))],\n\u001b[1;32m   1847\u001b[0m         \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1848\u001b[0;31m         cancellation_manager=cancellation_manager)\n\u001b[0m\u001b[1;32m   1849\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1850\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1922\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1923\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1924\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1925\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1926\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    548\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"oOp0Y3AZIU_1","executionInfo":{"status":"ok","timestamp":1602524779618,"user_tz":-330,"elapsed":803042,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":["U_net.save_weights('U_net.h5')"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y5KpqfoMKGyk","executionInfo":{"status":"ok","timestamp":1602524779621,"user_tz":-330,"elapsed":803036,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":["\n","for layer in U_net.layers:\n","  layer.trainable = False"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"In0841sdI3Yf","executionInfo":{"status":"ok","timestamp":1602524779624,"user_tz":-330,"elapsed":803030,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}},"outputId":"d72373f5-6af0-48bf-a4a9-0c1bfa21b13b","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from tensorflow.keras.layers import GlobalAveragePooling2D, AveragePooling2D\n","intermediate_output = U_net.get_layer(\"flatten_bottleneck\").output\n","x = Reshape((18,27,512))(intermediate_output)\n","x = AveragePooling2D()(x)\n","x = Flatten()(x)\n","\n","x = Dense(8192, activation=\"relu\")(x)\n","x = Dense(4096, activation=\"relu\")(x)\n","x = Dense(512, activation=\"relu\",name = 'MLP_512')(x)\n","x = Dense(128, activation=\"relu\",name = 'MLP_128')(x)   # we can experiment with more dense layers if output of average pooling layer is too big\n","x = Dropout(0.2,name = 'dropout_MLP')(x)\n","out_mlp = Dense(5, activation=\"softmax\",name = 'output')(x)  # we have 5 classes\n","\n","total_model = Model(inputs=U_net.input, outputs=out_mlp)\n","opt=Adam(lr=1e-4)\n","total_model.compile(loss='categorical_crossentropy', optimizer=SGD(),\tmetrics=[\"accuracy\"])\n","total_model.summary()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Model: \"functional_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 288, 432, 3)]     0         \n","_________________________________________________________________\n","block_1_conv1_contract (Conv (None, 288, 432, 32)      896       \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 288, 432, 32)      128       \n","_________________________________________________________________\n","block_1_conv2_contract (Conv (None, 288, 432, 32)      9248      \n","_________________________________________________________________\n","block_1_conv_bn_contract (Ba (None, 288, 432, 32)      128       \n","_________________________________________________________________\n","block_1_dropout_contract (Dr (None, 288, 432, 32)      0         \n","_________________________________________________________________\n","block_1_lrelu_contract (Leak (None, 288, 432, 32)      0         \n","_________________________________________________________________\n","block_1_max_pool (MaxPooling (None, 144, 216, 32)      0         \n","_________________________________________________________________\n","block_2_conv1_contract (Conv (None, 144, 216, 64)      18496     \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 144, 216, 64)      256       \n","_________________________________________________________________\n","block_2_conv2_contract (Conv (None, 144, 216, 64)      36928     \n","_________________________________________________________________\n","block_2_conv_bn_contract (Ba (None, 144, 216, 64)      256       \n","_________________________________________________________________\n","block_2_dropout_contract (Dr (None, 144, 216, 64)      0         \n","_________________________________________________________________\n","block_2_lrelu_contract (Leak (None, 144, 216, 64)      0         \n","_________________________________________________________________\n","block_2_max_pool (MaxPooling (None, 72, 108, 64)       0         \n","_________________________________________________________________\n","block_3_conv1_contract (Conv (None, 72, 108, 128)      73856     \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 72, 108, 128)      512       \n","_________________________________________________________________\n","block_3_conv2_contract (Conv (None, 72, 108, 128)      147584    \n","_________________________________________________________________\n","block_3_conv_bn_contract (Ba (None, 72, 108, 128)      512       \n","_________________________________________________________________\n","block_3_dropout_contract (Dr (None, 72, 108, 128)      0         \n","_________________________________________________________________\n","block_3_lrelu_contract (Leak (None, 72, 108, 128)      0         \n","_________________________________________________________________\n","block_3_max_pool (MaxPooling (None, 36, 54, 128)       0         \n","_________________________________________________________________\n","block_4_conv1_contract (Conv (None, 36, 54, 256)       295168    \n","_________________________________________________________________\n","batch_normalization_3 (Batch (None, 36, 54, 256)       1024      \n","_________________________________________________________________\n","block_4_conv2_contract (Conv (None, 36, 54, 256)       590080    \n","_________________________________________________________________\n","block_4_conv_bn_contract (Ba (None, 36, 54, 256)       1024      \n","_________________________________________________________________\n","block_4_dropout_contract (Dr (None, 36, 54, 256)       0         \n","_________________________________________________________________\n","block_4_lrelu_contract (Leak (None, 36, 54, 256)       0         \n","_________________________________________________________________\n","block_4_max_pool (MaxPooling (None, 18, 27, 256)       0         \n","_________________________________________________________________\n","block_5_conv1_contract (Conv (None, 18, 27, 512)       1180160   \n","_________________________________________________________________\n","batch_normalization_4 (Batch (None, 18, 27, 512)       2048      \n","_________________________________________________________________\n","block_5_conv2_contract (Conv (None, 18, 27, 512)       2359808   \n","_________________________________________________________________\n","block_5_conv_bn_contract (Ba (None, 18, 27, 512)       2048      \n","_________________________________________________________________\n","block_5_dropout_contract (Dr (None, 18, 27, 512)       0         \n","_________________________________________________________________\n","block_5_lrelu_contract (Leak (None, 18, 27, 512)       0         \n","_________________________________________________________________\n","flatten_bottleneck (Flatten) (None, 248832)            0         \n","_________________________________________________________________\n","reshape (Reshape)            (None, 18, 27, 512)       0         \n","_________________________________________________________________\n","average_pooling2d (AveragePo (None, 9, 13, 512)        0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 59904)             0         \n","_________________________________________________________________\n","dense (Dense)                (None, 8192)              490741760 \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 4096)              33558528  \n","_________________________________________________________________\n","MLP_512 (Dense)              (None, 512)               2097664   \n","_________________________________________________________________\n","MLP_128 (Dense)              (None, 128)               65664     \n","_________________________________________________________________\n","dropout_MLP (Dropout)        (None, 128)               0         \n","_________________________________________________________________\n","output (Dense)               (None, 5)                 645       \n","=================================================================\n","Total params: 531,184,421\n","Trainable params: 526,464,261\n","Non-trainable params: 4,720,160\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"u5tPpz8g5WnW","executionInfo":{"status":"ok","timestamp":1602524819971,"user_tz":-330,"elapsed":1190,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":["regularizer = tf.keras.regularizers.l2(.0001)\n","batch_size=20\n","for layer in total_model.layers:\n","    if layer.trainable == True:\n","        for attr in ['kernel_regularizer']:\n","            if hasattr(layer, attr):\n","                setattr(layer, attr, regularizer)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"9tCTjJpaKRnF","executionInfo":{"status":"ok","timestamp":1602524822786,"user_tz":-330,"elapsed":1185,"user":{"displayName":"SAHIL JINDAL","photoUrl":"","userId":"17061076833624679412"}}},"source":["import tensorflow as tf\n","#callback for best Val Accuracy\n","model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n","    filepath=\"/content/total_best.ckpt\",\n","    save_weights_only=True,\n","    monitor='val_accuracy',\n","    mode='max',\n","    save_best_only=True)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"y-k7gscqKYlV","outputId":"3dc90de3-d9c0-4f2c-c7cc-695264b6a1dc","colab":{"base_uri":"https://localhost:8080/","height":736}},"source":["#total_model\n","total_model.fit(train_1, train_lab_1, batch_size=16,\tvalidation_data=(test_1, test_lab_1),\tepochs=50, verbose=2, callbacks=[model_checkpoint_callback])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","38/38 - 33s - loss: 1.3759 - accuracy: 0.4901 - val_loss: 1.4417 - val_accuracy: 0.5033\n","Epoch 2/50\n","38/38 - 4s - loss: 1.3892 - accuracy: 0.5017 - val_loss: 1.4007 - val_accuracy: 0.5033\n","Epoch 3/50\n","38/38 - 4s - loss: 1.3936 - accuracy: 0.5050 - val_loss: 1.4279 - val_accuracy: 0.5033\n","Epoch 4/50\n","38/38 - 4s - loss: 1.3713 - accuracy: 0.5050 - val_loss: 1.4237 - val_accuracy: 0.5033\n","Epoch 5/50\n","38/38 - 4s - loss: 1.3474 - accuracy: 0.5050 - val_loss: 1.4255 - val_accuracy: 0.5033\n","Epoch 6/50\n","38/38 - 4s - loss: 1.3526 - accuracy: 0.5050 - val_loss: 1.4863 - val_accuracy: 0.5033\n","Epoch 7/50\n","38/38 - 4s - loss: 1.3741 - accuracy: 0.5050 - val_loss: 1.4373 - val_accuracy: 0.5033\n","Epoch 8/50\n","38/38 - 4s - loss: 1.3568 - accuracy: 0.5050 - val_loss: 1.4339 - val_accuracy: 0.5033\n","Epoch 9/50\n","38/38 - 4s - loss: 1.3668 - accuracy: 0.5050 - val_loss: 1.4260 - val_accuracy: 0.5033\n","Epoch 10/50\n","38/38 - 4s - loss: 1.3554 - accuracy: 0.5050 - val_loss: 1.4218 - val_accuracy: 0.5033\n","Epoch 11/50\n","38/38 - 4s - loss: 1.3663 - accuracy: 0.5050 - val_loss: 1.4342 - val_accuracy: 0.5033\n","Epoch 12/50\n","38/38 - 4s - loss: 1.3643 - accuracy: 0.5050 - val_loss: 1.3988 - val_accuracy: 0.5033\n","Epoch 13/50\n","38/38 - 4s - loss: 1.3506 - accuracy: 0.5050 - val_loss: 1.4349 - val_accuracy: 0.5033\n","Epoch 14/50\n","38/38 - 4s - loss: 1.3559 - accuracy: 0.5050 - val_loss: 1.4096 - val_accuracy: 0.5033\n","Epoch 15/50\n","38/38 - 4s - loss: 1.3635 - accuracy: 0.5050 - val_loss: 1.4003 - val_accuracy: 0.5033\n","Epoch 16/50\n","38/38 - 4s - loss: 1.3589 - accuracy: 0.5050 - val_loss: 1.4174 - val_accuracy: 0.5033\n","Epoch 17/50\n","38/38 - 4s - loss: 1.3420 - accuracy: 0.5050 - val_loss: 1.3881 - val_accuracy: 0.5033\n","Epoch 18/50\n","38/38 - 4s - loss: 1.3531 - accuracy: 0.5050 - val_loss: 1.4626 - val_accuracy: 0.5033\n","Epoch 19/50\n","38/38 - 4s - loss: 1.3552 - accuracy: 0.5050 - val_loss: 1.4093 - val_accuracy: 0.5033\n","Epoch 20/50\n","38/38 - 4s - loss: 1.3487 - accuracy: 0.5050 - val_loss: 1.4118 - val_accuracy: 0.5033\n","Epoch 21/50\n","38/38 - 4s - loss: 1.3408 - accuracy: 0.5050 - val_loss: 1.4303 - val_accuracy: 0.5033\n","Epoch 22/50\n"],"name":"stdout"}]}]}